apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    app: nginx
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.14.2   # Under normal case I will update the image to our app image
        ports:
        - containerPort: 80
        env:
          - name: POSTGRES_HOST 
            valueFrom:
              configMapKeyRef:
                name: special-deployment
                key: POSTGRES_HOST
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: secret-deployment
                key: POSTGRES_PASSWORD

---

apiVersion: v1
kind: Service
metadata:
  name: nginx-deployment-service
spec:
  selector:
    app: nginx
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80

--- 

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: web
spec:
  selector:
    matchLabels:
      app: postgresql
  serviceName: "postgresql"
  replicas: 1 # by default is 1
  minReadySeconds: 10 # by default is 0
  template:
    metadata:
      labels:
        app: postgresql # has to match .spec.selector.matchLabels
    spec:
      terminationGracePeriodSeconds: 10
      containers:
      - name: postgresql
        image: registry.k8s.io/postgres:17
        ports:
        - containerPort: 5432
          name: web
      volumeMounts:
        - name: www
          mountPath: /var/lib/postgresql/data
  volumeClaimTemplates:
  - metadata:
      name: www
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: "my-storage-class"
      resources:
        requests:
          storage: 1Gi

--- 

apiVersion: v1
kind: Service
metadata:
  name: postgresql
  labels:
    app: postgresql  # postgresql
spec:
  ports:
  - port: 5432
    name: web
  clusterIP: None
  selector:
    app: postgresql

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-deployment
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:8.0-M03-alpine
        ports:
        - containerPort: 6379

---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
spec:
  selector:
    app: redis
  ports:
    - protocol: TCP
      port: 6379
      targetPort: 6379



# Ensure the Flask app connects to both 
# PostgreSQL and Redis using environment 
# variables passed from a Kubernetes 
# ConfigMap and Secret.
